#!/bin/sh -e
. `dirname $0`/../share/managetools/functions.sh

MACHINE=$1
BACKUP=$2
LANG=C
VIRSH=`getbinary virsh`
CAT=`getbinary cat`
GZIP=`getbinary pigz`

if [ "$BACKUP" = "" ]; then
  echo "USAGE: $1 <machine name> <backup file>"
  exit 1
fi
state=`$VIRSH dominfo $MACHINE | grep "State:"  | sed s/.*:\ *//g`
echo "Machine state: $state"

do_copy()
{
  echo "Backing up image (using gzip compression)"
  $CAT $image_file | $GZIP -p 4 -9 > $BACKUP.gz
}
do_xml()
{
  echo "Backing up xml configuration"
  $VIRSH dumpxml $MACHINE > $BACKUP.xml
}

image_file=`$VIRSH domblklist  $MACHINE  | grep -v Target | grep -v "\\-\\-\\-" | head -n 1 | sed s/.*\ //g`
if [ ! -f $image_file ]; then
  echo "Image file: $image_file not found. Parse error"
  exit 1
fi


if [ "$state" = "shut off" ]; then
  echo "Due to shut off state, just backing up image file"
  do_copy
  exit 0
elif [ "$state" = "running" ]; then
  checkversion `$VIRSH --version` 1.2.9 libvirt
  echo "Using on-the-fly backup method"
  echo "Creating snapshot"
  $VIRSH snapshot-create-as --domain $MACHINE backup --diskspec vda,file=/data/backup.snapshot.$MACHINE.qcow2 --disk-only --atomic
  do_copy
  echo "Restoring snapshot"
  $VIRSH blockcommit $MACHINE vda --active --verbose --pivot

  image_file2=`$VIRSH domblklist  $MACHINE  | grep -v Target | grep -v "\\-\\-\\-" | head -n 1 | sed s/.*\ //g`
  if [ "$image_file" != "$image_file2" ]; then
    echo "Restore failed, because old image ($image_file) does not match new one ($image_file2)"
    exit 1
  fi

  echo "Removing unused snapshot file"
  rm /data/backup.snapshot.$MACHINE.qcow2

  echo "Removing snapshot data"
  $VIRSH snapshot-delete $MACHINE backup --metadata
else
  echo "Unknown machine state: $state. Will not backup."
  exit 1
fi

do_xml

